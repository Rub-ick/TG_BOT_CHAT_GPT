import asyncio
from g4f.client import Client
import sys
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime


# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = '7559134674:AAHzi6r8AZQ9xq_YqFIxMp-jVMzX5OM2v8g'

client = Client()
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)  # –î–∏—Å–ø–µ—Ç—á–µ—Ä
router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤
async def log_message(user_id, username, message_text):
    log_file_path = 'log.txt'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
    log_entry = f"{datetime.now().strftime('%Y-%m-%d %H:%M:%S')} - User ID: {user_id}, Username: {username}, Message: {message_text}\n"
    print(log_entry)

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (append)
        with open(log_file_path, 'a', encoding='utf-8') as log_file:
            log_file.write(log_entry)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤: {e}")


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–∞ –≤ Flux
async def send_promt_to_flux(promt):
    response = await client.images.async_generate(  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
        model="flux",
        prompt=f"{promt}",
        response_format="url"
    )
    return response


# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–º—Ç–∞ –≤ GPT-4
async def send_promt_to_gpt4(promt):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "user", "content": f"{promt}"}
        ],
    )
    return response.choices[0].message.content


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStatment(StatesGroup):
    Waiting_for_promt_gpt = State()
    Waiting_for_promt_flux = State()
    Waiting_for_choice_to_do = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.button(text="ü§ñ–°–ø—Ä–æ—Å–∏—Ç—å Chat-gpt 4.ü§ñ")
    builder.button(text="üñº–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.üñº")
    return builder.as_markup(resize_keyboard=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await log_message(message.from_user.id, message.from_user.username, message.text)
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Chat-gpt 4! –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —á–µ–º —É–≥–æ–¥–Ω–æ, –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text.in_(["ü§ñ–°–ø—Ä–æ—Å–∏—Ç—å Chat-gpt 4.ü§ñ", "üñº–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.üñº"]))
async def handle_main_menu(message: types.Message, state: FSMContext):
    await log_message(message.from_user.id, message.from_user.username, message.text)
    if await state.get_state():
        return  # –µ—Å–ª–∏ –≤ FSM ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    if message.text == "ü§ñ–°–ø—Ä–æ—Å–∏—Ç—å Chat-gpt 4.ü§ñ":
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç: ")
        await state.set_state(UserStatment.Waiting_for_promt_gpt)
        await log_message(message.from_user.id, message.from_user.username, message.text)
    elif message.text == "üñº–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.üñº":
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø—Ä–æ–º—Ç: ")
        await state.set_state(UserStatment.Waiting_for_promt_flux)
        await log_message(message.from_user.id, message.from_user.username, message.text)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ GPT-4
@router.message(UserStatment.Waiting_for_promt_gpt)
async def get_promt_gpt(message: types.Message, state: FSMContext):
    promt = message.text
    await log_message(message.from_user.id, message.from_user.username, message.text)
    await message.answer("‚åõ –î—É–º–∞—é...")

    try:
        reply = await send_promt_to_gpt4(promt)
        await message.answer(reply)
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞ Flux
@router.message(UserStatment.Waiting_for_promt_flux)
async def get_promt_flux(message: types.Message, state: FSMContext):
    promt = message.text
    await log_message(message.from_user.id, message.from_user.username, message.text)
    await message.answer("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é...")

    try:
        response = await send_promt_to_flux(promt)
        if response and response.data:
            image_url = response.data[0].url
            await message.answer(f'<a href="{image_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</a>', parse_mode="HTML")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    if sys.platform.startswith("win"):
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
        loop = asyncio.get_running_loop()
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
